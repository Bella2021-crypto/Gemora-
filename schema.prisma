generator client { provider = "prisma-client-js" }
datasource db { provider = "sqlite"; url = env("DATABASE_URL") }

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String?  @unique
  image     String?
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  accounts  Account[]
  sessions  Session[]
  listings  Listing[]
  favorites Favorite[]
  orders    Order[]   @relation("BuyerOrders")
}

model Listing {
  id          String    @id @default(cuid())
  title       String
  description String
  priceCents  Int
  images      String[]
  size        String?
  brand       String?
  category    String?
  condition   String?
  seller      User      @relation(fields: [sellerId], references: [id])
  sellerId    String
  createdAt   DateTime  @default(now())
  favorites   Favorite[]
  orderItems  OrderItem[]
}

model Favorite {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  listing   Listing  @relation(fields: [listingId], references: [id])
  listingId String
  createdAt DateTime @default(now())
  @@unique([userId, listingId])
}

model Order {
  id         String      @id @default(cuid())
  buyer      User        @relation("BuyerOrders", fields: [buyerId], references: [id])
  buyerId    String
  totalCents Int
  status     String      @default("pending")
  createdAt  DateTime    @default(now())
  items      OrderItem[]
}

model OrderItem {
  id         String   @id @default(cuid())
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String
  listing    Listing  @relation(fields: [listingId], references: [id])
  listingId  String
  priceCents Int
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}
